{"version":3,"sources":["components/chart.js","earthquakes.js","components/footer.js","App.js","index.js"],"names":["Chart","chartData","className","style","color","width","height","data","dataKey","strokeDasharray","cursor","stroke","strokeWidth","iconSize","type","memo","earthQuakesListUrls","Earthquakes","useState","earthQuakesListUrl","setEarthQuakesListUrl","earthquakesData","setEarthQuakesData","setChartData","showEarthquakesList","setShowEarthQuakesList","showEarthquakesChart","setShowEarthQuakesChart","isFetching","setIsFetching","count","setCount","updateEarthQuakeListUrl","url","useEffect","a","fetch","then","res","json","features","metadata","chartDataToShow","map","properties","time","place","magnitude","mag","catch","err","getEarthquakes","href","onClick","Date","toDateString","Footer","target","rel","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b06f1af.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst Chart = ({ chartData }) => {\n  return (\n    //Chart that shows relation between earthquakes and their magnitude\n    <div className=\"earthquake-charts\" style={{ color: \"white\" }}>\n      <ResponsiveContainer width=\"60%\" height={400}>\n        <LineChart data={chartData}>\n          <XAxis />\n          <YAxis dataKey=\"magnitude\" />\n          <CartesianGrid strokeDasharray=\"5 5\" />\n          <Tooltip cursor={{ stroke: \"white\", strokeWidth: 2 }} />\n          <Legend iconSize={20} />\n          <Line type=\"monotone\" dataKey=\"magnitude\" stroke=\"#4CAF50\" />\n          <Line type=\"monotone\" dataKey=\"time\" stroke=\"red\" />\n          <Line type=\"monotone\" dataKey=\"place\" stroke=\"blue\" />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default memo(Chart);\n","import React, { useEffect, useState } from \"react\";\nimport Chart from \"./components/chart.js\";\n\nconst earthQuakesListUrls = {\n  HOUR:\n    \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson\",\n  DAY:\n    \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson\",\n  WEEK:\n    \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.geojson\",\n};\nfunction Earthquakes() {\n  const [earthQuakesListUrl, setEarthQuakesListUrl] = useState(\n    earthQuakesListUrls.HOUR\n  );\n  const [earthquakesData, setEarthQuakesData] = useState([]);\n  const [chartData, setChartData] = useState([]);\n  const [showEarthquakesList, setShowEarthQuakesList] = useState(false);\n  const [showEarthquakesChart, setShowEarthQuakesChart] = useState(false);\n  const [isFetching, setIsFetching] = useState(true);\n  const [count, setCount] = useState(0);\n\n  function toggleList() {\n    setShowEarthQuakesList(!showEarthquakesList);\n  }\n\n  function toggleChart() {\n    setShowEarthQuakesChart(!showEarthquakesChart);\n  }\n\n  function updateEarthQuakeListUrl(url) {\n    return () => {\n      setIsFetching(true);\n      setEarthQuakesListUrl(url);\n    };\n  }\n\n  useEffect(() => {\n    const getEarthquakes = async () => {\n      return fetch(earthQuakesListUrl)\n        .then((res) => {\n          return res.json();\n        })\n        .then((data) => {\n          const { features, metadata } = data;\n          setIsFetching(false);\n          const chartDataToShow = features.map(\n            ({ properties: { time, place, mag } }) => {\n              return {\n                time,\n                magnitude: mag,\n                place,\n              };\n            }\n          );\n          setChartData(chartDataToShow);\n          setEarthQuakesData(features);\n          setCount(metadata.count);\n          setShowEarthQuakesList(true);\n          setShowEarthQuakesChart(true);\n        })\n        .catch((err) => {\n          return { type: \"FAILURE\", err };\n        });\n    };\n    getEarthquakes();\n  }, [earthQuakesListUrl]);\n\n  return (\n    <div className=\"main\">\n      <a className=\"text-center\" href=\"/\">\n        <h1>Quaker -- Earthquakes Monitoring</h1>\n      </a>\n      <p className=\"text-center\">\n        Click on either one of the buttons below to get information about\n        earthquakes happening around the world..!\n      </p>\n      <div className=\"flex-row flex-row__center\">\n        <button\n          className=\"btn\"\n          onClick={updateEarthQuakeListUrl(earthQuakesListUrls.HOUR)}\n        >\n          Earthquakes Past Hour\n        </button>\n        <button\n          className=\"btn\"\n          onClick={updateEarthQuakeListUrl(earthQuakesListUrls.DAY)}\n        >\n          Earthquakes Past Day\n        </button>\n        <button\n          className=\"btn\"\n          onClick={updateEarthQuakeListUrl(earthQuakesListUrls.WEEK)}\n        >\n          Earthquakes Past Week\n        </button>\n      </div>\n\n      {count > 0 && (\n        <div className=\"toggle-list-chart-buttons\">\n          <button className=\"list-btn\" onClick={toggleList}>\n            {showEarthquakesList ? \"hide list\" : \"show list\"}\n          </button>\n          <button className=\"chart-btn\" onClick={toggleChart}>\n            {showEarthquakesChart ? \"hide chart\" : \"show chart\"}\n          </button>\n        </div>\n      )}\n      <br />\n      {!isFetching ? (\n        showEarthquakesChart && <Chart chartData={chartData} />\n      ) : (\n        <div className=\"loading-state\">\n          <h2>\n            Loading a sweet little graph just for you...! It might take a few\n            seconds.\n          </h2>\n        </div>\n      )}\n\n      <div className=\"earthquake-details-block\">\n        {showEarthquakesList &&\n          earthquakesData.map(({ properties }) => {\n            return (\n              <div className=\"earthquake-details\" key={properties.time}>\n                <p>\n                  An earthquake happened at {properties.place}\n                  {properties.time\n                    ? ` on ${new Date(properties.time).toDateString()}`\n                    : \"\"}\n                </p>\n                <p>The magnitude level is {properties.mag}</p>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nexport default Earthquakes;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <footer>\n        <p>\n          Coded by{\" \"}\n          <a className=\"link\" href=\"https://factsfinder.github.io\">\n            Phanindra Veera\n          </a>\n        </p>\n        <p>\n          Developed with &#10084; using React. Find the code at{\" \"}\n          <a className=\"link\" href=\"https://github.com/factsfinder/quaker.git\">\n            Github\n          </a>\n        </p>\n        <p></p>\n        <p>\n          Earthquakes data is obtained by the{\" \"}\n          <a\n            className=\"link\"\n            href=\"https://earthquake.usgs.gov/fdsnws/event/1/\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            United States Geological Survey's API\n          </a>\n        </p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport Earthquakes from \"./earthquakes.js\";\nimport Footer from \"./components/footer.js\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <>\n      <Earthquakes />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}